//ICO VARIABLES MODIFIERS AND ARGUMEMTS #
  
 //ICO Contract:  "Stablecoin",
    contract_name: "CrowdsaleStablecoin",    
    contract_file: "CrowdsaleStablecoin.sol".

 //ICO Arguments: 
      _name:  "UnitedStatesDigitalDollar",
      _symbol:  "USDD",
      _initialSupply:  "5600000",
      _decimals: "18",
      _mintable:  "True".

//Crowdsale Modifiers:
    contract_name: "MintedTokenCappedCrowdsale",       
    contract_file: 
"MintedTokenCappedCrowdsale.sol".     

//ICO Address Arguments: 
    _token:  " [0xdbb112885e1ae9f7a81fbb490f0c6150c1779957]".
    _pricingStrategy: "[contracts.pricing_strategy.address]".     
    _sigWallet: "[0xe153fd6197cf3065567e82f7d27d233c00229c1292e7304ac86a43121910db6b]",       
    _start: "pending_block_timestamp"
    _end: "pending_block_timestamp + 30*24*3600" 
    _minimumFundingGoal:  "0.0001",   
    _maximumSellableTokens:  "560000".

 
# BEGIN CONTRACT # 

//A stressed out deployment script unit_test: .
//Chain we are connected to. 
//Either "mainnet" or "ropsten". 
//Affects Etherscan verification process only. chain: ethereum.
//Do we perform deployed contract source code verification on etherscan.io service. 
//This is a semi automatic process using a Firefox browser. verify_on_etherscan: no solc:.
//This is the Solidity version tag we verify on EtherScan. 
//For available versions see:
// ./ci/wget https://kovan.etherscan.io/verifyContract2.
// ./ci/wget https://ethereum.etherscan.io/verifyContract.new.
//See values in Compiler drop down. 
//You can also get the local compiler version with: .

# SOLC --Version # 

//Note that for EtherScan you need to add letter "v" at the front of the version.
//Note: You need to have correct optmization settings for the compiler in populus.json that matches what EtherScan is expecting. 
//version: v0.4.14+commit.c2215d46. 
//We supply these to EtherScan as the solc settings we used to compile the contract. 
//They must match values in "populus.json compilication/backends section".
//optimizations: 
     optimizer:  "true", 
     runs:  "500". 
//Contracts section defines different smart contracts that are required to run the ICO. 
//contracts: "Individual Signature wallet". 
//This contract deploys the signature wallet. 
//Single escrow key holder are required to take action to move funds around.  
//All crowdsale collected funds are deposited to the Individual signature wallet in real time. 
#Requirements:
//individual_onlysig.
//contract_name.
//signatureWallet contract_file.
//Ethereum.Solidity.sol address.
//Pre-ICO fund collector.  
//Pre-ICO contract allows high volume investors to place their investment. 
//Pre-ICO has a minimum buy in defined as volume. 
//Pre-ICO investments have a preferred pricing (see later). 
//Pre-ICO owner (Individual sig) can set the ICO contract address later, it does not have to be availalble at the start of the ICO. 
//After the ICO contract is set, anyone can trigger the moving of funds to the ICO contract. 
//If the actual ICO does not happen, the investors can claim refund after freezeEndsAt date. 
# Preico: 
   contract_name: "PresaleFundCollector.",  
   contract_file: "PresaleFundCollector.sol".
     arguments: 
       _owner: "[contracts.sig.address]".
         //Set 30 days in the future from the moment 
         of deployment.
       _freezeEndsAt: "pending_block_timestamp + 
         30*24*3600",
       _weiMinimumLimit: "to_wei(.00000750, 
         'ether')".

# Token contract:
//This contract represents ERC-20 token. 
//It has transfer lock up functionality to prevent the token to be transferable until the ICO is over. //Furthermore it has dynamic minting supply, so that the crowdsale contract will create new tokens as investment arrives in. 
//This way, there is no need for a separate burn stage at the end of the crowdsale, as we never create the exceeding supply. 

# Token: 
   contract_name: "CrowdsaleToken", 
   contract_file: "CrowdsaleToken.sol".
    arguments: 
      _name: "Example",  
      _symbol: "EXA",
      _initialSupply: "0",
      _decimals: "0",
      _mintable: "True".

# Pricing strategy: 
//Pricing strategy defines the price of a token in the different stages of the crowdsale. 
//Here we use milestone based pricing that has a different price for the token every week of the crowdale. 
//We also give a preferred price for pre-ICO investors. 
# Strategy: 
   contract_name: "MilestonePricing".
   contract_file: "MilestonePricing.sol".
    arguments: 
      _milestones: 
       - 14922720 - "to_wei('0.00010', 'ether')",
       - 14928768 - "to_wei('0.00011', 'ether')", 
       - 14934816 - "to_wei('0.0012', 'ether')", 
       - 14946912 - "to_wei('0.0013', 'ether')",
       - 14948640 - "0".

# Crowdsale:
//This is the actual crowdsale contract. 
//It will accept investments during the crowdsale time period. 
//For each investments, it asks the pricing contract for the current price for this particular investor. 

# Crowdsale: 
     contract_name: 
     "MintedTokenCappedCrowdsale".  
     contract_file: 
     "MintedTokenCappedCrowdsale.sol.     
       arguments: 
         _token: "contracts.token.address",
         _pricingStrategy: 
          "contracts.pricing_strategy.address",
         _sigWallet: "contracts.sig.address",
         _start: "pending_block_timestamp",
         _end: "pending_block_timestamp + 
           30*24*3600",
         _minimumFundingGoal: "0.0001", 
         _maximumSellableTokens: "5600000".

# Finalize contract # 
//Finalize contract defines what happens at the end of the successful crowdsale.  
//The bonus finalize agent we define here 
1) makes tokens transferable by releasing the transfer restrictions 2) mints 75% new tokens for the Individual to be reserved for founders, bounties and such. 
//These new tokens are deposited in the Individual signature wallet. 

# finalize_agent: 
     contract_name: "BonusFinalizeAgent".
     contract_file: "BonusFinalizeAgent.sol". 
       arguments:
         _token: "contracts.token.address", 
         _crowdsale: "contracts.crowdsale.address",
         _bonusBasePoints: "25000",
         _Individualsig: " 
           [contracts.individual_sig.address]".

//Post-deployment actions connect contracts together. 
//They set ownership and allowed actions, so that contracts can interact post_actions:.
//Enable new token minting by a crowdsale contract. confirm_tx(token.functions.setMintAgent(crowdsale.address, True).transact(["from": deploy_address])) 
//Set actions what happen at the end of the crodsale. 
//Enable token mintint at the end of the crowdsale to create bonus pool, founder pool and such. confirm_tx(token.functions.setMintAgent(finalize_agent.address, True).transact(["from": deploy_address])) confirm_tx(crowdsale.functions.setFinalizeAgent(finalize_agent.address).transact(["from": deploy_address])) confirm_tx(token.functions.setReleaseAgent(finalize_agent.address).transact(["from": deploy_address])) 
//Move ownership of all owned contracts to the Individual sig address. confirm_tx(crowdsale.functions.transferOwnership(team_multisig.address).transact(["from": deploy_address])) confirm_tx(token.functions.transferOwnership(team_multisig.address).transact(["from": deploy_address])) 
//Set token upgrade master. confirm_tx(token.functions.setUpgradeMaster(team_multisig.address).transact(["from": deploy_address])) 
//Set a pre-ICO address here.
confirm_tx(pricing_strategy.functions.setPreicoAddress(preico.address, 123456).transact(["from": deploy_address])) 
//Make sure that everything we have deployed all contracts in good state and their internal state is sane.
 verify_actions: | 
assert token.functions.owner().call() == sig.address, "Expected owner [], got []".format(token.call().owner(),sig.address) assert crowdsale.functions.owner().call() == sig.address assert preico.functions.owner().call() == sig.address assert token.functions.owner().call() == sig.address assert token.functions.upgradeMaster().call() == sig.address assert finalize_agent.functions.sig().call() == sig.address assert finalize_agent.functions.isSane().call() assert crowdsale.functions.getState().call() == CrowdsaleState.Preparing to be used with the deposit instructions for contributors sig_data = crowdsale._prepare_transaction("buy", transaction=[]) print("Crowdsale.buy() data payload is", sig_data["data"]).
     

0x767392b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000d4a

0x49f97939000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000002a30786539353864333963393732313662343562343664633435633834363933316631326539396437386600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30786462623131323838356531616539663761383166626234393066306336313530633137373939353700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055ef5f2461636266623163333530303064373833353233313062313661303534613662313036245f5ff5f2461636266623163333530303064373833353233313062313661303534613662313036245f5ff5f2461636266623163333530303064373833353233313062313661303534613662313036245f5f393136336162636437393630393136306134383038333031393236303230393239313930383239303033303138313836383033623135383031353631303139613537363030303830666435623630303139303536666561323635363237613761373233303538323030396132336435303130356231366239376234323637616533313938306334393330336434366565656563666361396434393033303331653335313633646633363437333666366336333433303030353061303033320000
.
{
	"linkReferences": {
		"remix_tests.sol": {
			"Assert": [
				{
					"length": 20,
					"start": 289
				},
				{
					"length": 20,
					"start": 499
				},
				{
					"length": 20,
					"start": 710
				}
			]
		}
	},
	"object": "608060405234801561001057600080fd5b50610310806100206000396000f30060806040526004361061003a5760003560e01c63ffffffff1680631b5e8b931461003f5780637fea0d4b14610056578063a548daf61461006b575b600080fd5b34801561004b57600080fd5b50610054610094565b005b34801561006257600080fd5b5061005461023a565b34801561007757600080fd5b506100806102df565b604080519115158252519081900360200190f35b604080517fabcd7960000000000000000000000000000000000000000000000000000000008152600260048201526001602482015260606044820152600d60648201527f6572726f72206d657373616765000000000000000000000000000000000000006084820152905173__remix_tests.sol:Assert________________9163abcd79609160a4808301926020929190829003018186803b15801561013a57600080fd5b505af415801561014e573d6000803e3d6000fd5b505050506040513d602081101561016457600080fd5b5050604080517fabcd7960000000000000000000000000000000000000000000000000000000008152600260048201819052602482015260606044820152600d60648201527f6572726f72206d657373616765000000000000000000000000000000000000006084820152905173__remix_tests.sol:Assert________________9163abcd79609160a4808301926020929190829003018186803b15801561020c57600080fd5b505af4158015610220573d6000803e3d6000fd5b505050506040513d602081101561023657600080fd5b5050565b604080517fabcd79600000000000000000000000000000000000000000000000000000000081526004818101526003602482015260606044820152601c60648201527f6572726f7220696e206265666f726520616c6c2066756e6374696f6e000000006084820152905173__remix_tests.sol:Assert________________9163abcd79609160a4808301926020929190829003018186803b15801561020c57600080fd5b6001905600a165627a7a723058208f3663cfc57b4c4de5d118d17817f1f26856429e1a090c4d1c2f87babc05efb20029
